*****Curso de SOLID com JAVA*****

S = (SINGLE RESPONSIBILYTY PRINCIPLE - Princípio de resonsabilidade única)

	-Que classes/métodos/funções/módulos devem ter uma única responsabilidade bem definida
		-Que, segundo o Princípio de Responsabilidade Única (SRP), uma classe deve ter um e apenas um motivo para ser alterada
		-Como realizar uma refatoração no nosso sistema, para aplicar o SRP
		-Como extrair uma classe


#Coesão

	-Classes não coesas tendem a crescer indefinidamente, o que as tornam difícieis de manter.
	-Uma classe coesa faz bem uma única coisa
	-Classes coesas não devem ter várias responsabilidades

#Encapsulamento	

	-Classes não encapsuladas permitem violalção de regras de negócio, além de aumentarem o acoplamento.
	-Getters e setters não são formas eficientes de aplicar encapsulamento
	-É interessante fornecer acesso apenas ao que é necessário em nossas classes
	-O encapsulamento torna o uso das nossas classes mais fácil e intuitivo

#Acoplamento
	
	-Acoplamento é a dependência entre classes
	-Acoplamento nem sempre é ruim, e que é impossível criar um sistema sem nenhum acoplamento
	-Devemos controlar o nível de acoplamento na nossa aplicação (falaremos mais sobre isso)
	-Classes acopladas causam fragilidade no código da aplicação, o que dificulta sua manutenção.

O = (OPEN CLOSED PRINCIPLE - Princípio Aberto Fechado)

	- Entidades de software (classes, módulos, funções, etc.) devem estar abertas para extensão, porém fechadas para modificação.
	- Que cada classe deve conhecer e ser responsável por suas próprias regras de negócio;
	-Que o princípio Aberto/Fechado (OCP) diz que um sistema deve ser aberto para a extensão, mas fechado para a modificação
		-Isso significa que devemos poder criar novas funcionalidades e estender o sistema sem precisar modificar muitas classes já existentes
	-Uma classe que tende a crescer "para sempre" é uma forte candidata a sofrer alguma espécie de refatoração.

L = (LISKOV SUBSTITUTION PRINCIPLE - Princípio da substituição de Liskov)
	
	-Se parece um pato, grasna como um pato, mas precisa de baterias, você provavelmente tem a abstração errada.

	-Que, embora a herança favoreça o reaproveitamento de código, ela pode trazer efeitos colaterais quando não utilizada da maneira correta;
	-Que o Princípio de Substituição de Liskov (LSP) diz que devemos poder substituir classes base por suas classes derivadas em qualquer lugar, sem problema.	

I = (INTERFACE SEGREGATION PRINCIPLE = Princípio de Segregação de Interfase)

	- Uma classe não deve ser obrigada a implementar um método de determinada interface, se ele não será útil. Para isso, uma interface deverá ser extraída apenas com os métodos necessários
	- Que o Princípio de Segregação de Interfaces (ISP) diz que uma classe não deve ser obrigada a implementar um método que ela não precisa

D = (DEPENDENCY INVERSION PRINCIPLE - Princípio da Inversão de Dependência)	

	- Que o Princípio de Inversão de Dependência (DIP) diz que implementações devem depender de abstrações e abstrações não devem depender de implementações.


Observações:
	
	- Que é mais interessante e mais seguro para o nosso código depender de interfaces (classes abstratas, assinaturas de métodos e interfaces em si) do que das implementações de uma classe;
	- Que as interfaces são menos propensas a sofrer mudanças enquanto implementações podem mudar a qualquer momento
	- Que as interfaces devem definir apenas os métodos que fazem sentido para seu contexto
	
